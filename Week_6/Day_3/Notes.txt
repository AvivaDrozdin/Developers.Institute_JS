-- SELECT * FROM movies;
-- SELECT * FROM actors;

-- The reference is on the table movies
-- CREATE TABLE movies(
-- 	movie_id SERIAL PRIMARY KEY,
-- 	movie_title VARCHAR (50) NOT NULL,
-- 	movie_story TEXT,
-- 	actor_playing_id INTEGER REFERENCES actors (actor_id)
-- );



-- SYNTAX
-- SELECT columns_names
-- FROM TABLE1
-- INNER JOIN TABLE2
-- ON FK_values = PK_values

-- SAME AS
-- SELECT columns_names
-- FROM TABLE1
-- INNER JOIN TABLE2
-- ON PK_values = FK_values

-- INNER JOIN
-- INNER JOIN returns a result set containing a row in the left table that matches the row in the right table.
-- Actors playing in movies
SELECT first_name, last_name, movie_title
FROM actors
INNER JOIN movies
ON actor_id = actor_playing_id

-- LEFT JOIN
-- The LEFT JOIN returns a complete set of rows from the left table with the matching rows 
-- if available from the right table. If there is no match, the right side will have null values.
-- Actors playing in the movies ALSO the actors that are not playing in any movies
SELECT actor_id, first_name, last_name, movie_title
FROM actors
LEFT JOIN movies
ON actor_playing_id = actor_id

--RIGHT JOIN
--The RIGHT JOIN is a reversed version of the left join. 
-- It produces a result set that contains all rows from the right table with 
-- matching rows from the left table. If there is no match, the left side will have null values.
-- Actors playing in movies AND ALSO the movies that don't cast any actor
SELECT actor_id, first_name, last_name, movie_title
FROM actors
RIGHT JOIN movies
ON actor_playing_id = actor_id

--FULL JOIN
-- The FULL JOIN produces a result set that contains all rows from both the left and right tables,
-- with the matching rows from both sides where available. If there is no match, the missing side contains null values.
-- All the actors and all the movies
SELECT actor_id, first_name, last_name, movie_title
FROM actors
FULL JOIN movies
ON actor_playing_id = actor_id





-- One to One

-- One person has One TZ
-- One TZ belongs to ONLY ONE PERSON

-- One person has One profile
-- One profile belongs to ONLY ONE PERSON

-- One to One :  
-- An actor can own only one car, 
-- and a car belongs to only one person

-- UNIQUE FK
CREATE TABLE cars (
  car_id SERIAL PRIMARY KEY,
  brand VARCHAR(30) NOT NULL,
  color VARCHAR(30) NOT NULL,
  owner_id INTEGER UNIQUE REFERENCES actors (actor_id)
);

-- SUBQUERIES
INSERT INTO cars (brand, color, owner_id)
VALUES('Renault', 'black',(SELECT actor_id FROM actors WHERE first_name='George' AND last_name='Clooney')),
	  ('Mazda', 'red', (SELECT actor_id FROM actors WHERE first_name='Emma' AND last_name='Watson'))
RETURNING *

INSERT INTO cars (brand, color)
VALUES('Jaguar', 'yellow'),('BMW', 'pink')
RETURNING *

-- Find the car owned by Emma Watqon
SELECT last_name, brand
FROM cars
INNER JOIN actors
ON actor_id = owner_id
WHERE last_name='Watson';

-- Find the actors that own a car, and the cars not yet bought
SELECT last_name, brand
FROM actors
RIGHT JOIN cars
ON actor_id = owner_id;

-- SELECT * FROM cars;

UPDATE cars
SET owner_id = (SELECT actor_id FROM actors WHERE last_name='Damon')
WHERE brand='BMW'
RETURNING *

-- ERROR:  duplicate key value violates unique constraint "cars_owner_id_key"
-- DETAIL:  Key (owner_id)=(3) already exists.
UPDATE cars
SET owner_id = (SELECT actor_id FROM actors WHERE last_name='Clooney')
WHERE brand='Jaguar'
RETURNING *




-- One to many : An actor can have many houses, but a house is owned by only one actor

CREATE TABLE houses(
	house_id SERIAL PRIMARY KEY,
	city VARCHAR (20) NOT NULL,
	street VARCHAR (20) NOT NULL,
	street_number SMALLINT NOT NULL,
	number_rooms SMALLINT NOT NULL,	
	heir_id INTEGER REFERENCES actors (actor_id)
)

INSERT INTO houses (city, street,street_number, number_rooms, heir_id)
VALUES('Paris', 'Rue de la Paix', 20, 5, (SELECT actor_id FROM actors WHERE first_name='Emma' AND last_name='Watson')),
	  ('London', 'Buckingham', 2, 100, (SELECT actor_id FROM actors WHERE first_name='Emma' AND last_name='Watson')),
	  ('NewYork', 'Timesquare', 123, 10, (SELECT actor_id FROM actors WHERE first_name='George' AND last_name='Clooney'))
RETURNING *

-- How many houses are owned by Watson
SELECT COUNT(*)
FROM actors
INNER JOIN houses
ON actor_id=heir_id
WHERE last_name='Watson'

SELECT first_name, last_name, COUNT(*) AS nbHouses
FROM actors
INNER JOIN houses
ON actor_id=heir_id
GROUP BY first_name, last_name
ORDER BY nbHouses ASC;

INSERT INTO houses (city, street,street_number, number_rooms, heir_id)
VALUES('Paris', 'Madeleine', 20, 5, (SELECT actor_id FROM actors WHERE first_name='Matt' AND last_name='Damon'))
RETURNING *

-- Nb of houses per cities
SELECT city, COUNT(*) AS nbHouses FROM houses
GROUP BY city
ORDER BY city





-- ONE TO MANY
-- A genre can have many music
-- A music can belong to only one genre

-- CREATE TABLE genre (
--   genre_id SERIAL PRIMARY KEY,
--   genre VARCHAR(30) NOT NULL
-- );

-- CONSTRAINT - ON DELETE SET NULL : If the parent record is deleted the column ref_genre_id  in the child table will be set to null
-- CREATE TABLE musicalPiece (
--   musicalPiece_id SERIAL PRIMARY KEY,
--   musicalPiece_name VARCHAR(30) NOT NULL,
--   author VARCHAR(30) NOT NULL,
--   ref_genre_id INTEGER REFERENCES genre (genre_id) ON DELETE SET NULL
-- );

-- INSERT INTO genre (genre)
-- VALUES('Blues'),('Classical')
-- RETURNING *

-- INSERT INTO musicalPiece (musicalPiece_name, author,ref_genre_id)
-- VALUES
-- 	  ('I Cant Quit You Baby', 'Otis Rush', (SELECT genre_id FROM genre WHERE genre='Blues')),
-- 	  ('Crossroad Blues', 'Robert Johnson', (SELECT genre_id FROM genre WHERE genre='Blues'))
-- RETURNING *

-- Successful delete
-- DELETE from genre WHERE genre='Blues';

-- UPDATE musicalPiece
-- SET ref_genre_id = (SELECT genre_id FROM genre WHERE genre = 'Classical')
-- RETURNING *

SELECT musicalpiece_name
FROM genre
INNER JOIN musicalPiece
ON genre_id = ref_genre_id
WHERE genre = 'Classical'






-- -------------------------------------------------
-- Many to Many : 
-- An actor can play in many different movies, 
-- a movies can cast a lot of different actors

-- Then we create the new table
CREATE TABLE actors_movies (
  actor_id INTEGER NOT NULL REFERENCES actors(actor_id) ON DELETE CASCADE ON UPDATE CASCADE,
  movie_id INTEGER NOT NULL REFERENCES movies(movie_id) ON DELETE CASCADE ON UPDATE CASCADE,
  actor_role VARCHAR(30) NOT NULL,
  is_lead_role BOOLEAN NOT NULL,
  PRIMARY KEY (actor_id, movie_id)
);

INSERT into actors_movies(actor_id, movie_id, actor_role, is_lead_role) 
VALUES 
(
	(SELECT actor_id FROM actors where first_name = 'George' AND last_name = 'Clooney'), 
	(SELECT movie_id FROM movies where movie_title = 'Gravity'), 
	'Matt Kowalski', 
	TRUE
),

(
	(SELECT actor_id FROM actors where first_name = 'George' AND last_name = 'Clooney' ), 
	(SELECT movie_id FROM movies where movie_title = 'Oceans Eleven'), 
	'Danny Ocean', 
	FALSE
),

(
	(SELECT actor_id FROM actors where first_name = 'Matt' AND last_name = 'Damon' ),
	(SELECT movie_id FROM movies where movie_title = 'Oceans Eleven'),
	'Linus Caldwell', 
	FALSE
)

SELECT * FROM actors_movies;

-- Find the movies played by Clooney
SELECT first_name, last_name, movie_title, actor_role
FROM actors_movies AS am
INNER JOIN actors ON actors.actor_id = am.actor_id
INNER JOIN movies ON movies.movie_id = am.movie_id
WHERE last_name = 'Clooney';

-- Find the nb of movies played by Clooney
SELECT COUNT(*)
FROM actors_movies AS am
INNER JOIN actors ON actors.actor_id = am.actor_id
INNER JOIN movies ON movies.movie_id = am.movie_id
WHERE last_name = 'Clooney';




# Local Storage
​
In the early days of the web, data persistence was only possible 
with a server. Nowadays, through the use of LocalStorage, 
​
We can store data on clients like browsers and mobile apps 
without communicating with a back-end application.
​
LocalStorage is a key/value datastore that's available on a user's 
browser. LocalStorage **can only store string data for its keys and values**. 
​
The data isn't sent to the server when an HTTP request is made.
​
Data in LocalStorage has no expiration time. It can be removed via JavaScript or by clearing the browser's cache.
​
---
​
# Explaination
​
The localStorage read-only property of the window interface allows you to access a **Storage** object for the Document's origin; the stored data is saved across browser sessions.
​
The Storage interface of the Web Storage API provides access to a particular domain's session or local storage.
​
**Properties**
​
`Storage.length` Read only
Returns an integer representing the number of data items stored in the 
Storage object.
​
**Methods**
​
`Storage.key()`
When passed a number n, this method will return the name of the nth key in the storage.
​
`Storage.getItem()`
When passed a key name, will return that key's value.
​
`Storage.setItem()`
When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.
​
`Storage.removeItem()`
When passed a key name, will remove that key from the storage.
​
`Storage.clear()`
When invoked, will empty all keys out of the storage.
​
---
​
# Methods
​
![](C:\Users\nakac\OneDrive\Documents\Sessions DI\A- Lessons Weeks\Week6 - Database\Week6Day4\Notes\NotesImages\localstorage.png)
​
---
​
# Difference local storage and session storage
​
localStorage is similar to sessionStorage, except that while localStorage data **has no expiration time**, sessionStorage data gets cleared **when the page session ends** — that is, when the page is closed.
​
localStorage data is specific to the protocol of the document. In particular, for a site loaded over HTTP (e.g., http://example.com), localStorage returns a different object than localStorage for the corresponding site loaded over HTTPS (e.g., https://example.com).
​
See the Application tab/Local Storage
​
---
​
# Difference between cookies, session and local storage
​
**Storage Limit**
​
Each Storage method has a maximum size of data you can store with it. 
​
* Both local storage and session storage has a pretty large memory capacity. Local Storage store up to 10 megabytes and session storage up to 5 megabytes.
​
* But Cookies on the other hand have a very restrictive capacity of 4 kilobytes. This has an incredible small capacity. So you should not store too much information in cookies.
​
**Access**
​
Each storage method has slightly different levels of accessibility.
​
* Local Storage is accessible in any window or tab that is open to your site. This means if you store some data in local storage on one tab of your browser that same local storage data will be available on all other tabs and windows you have open to that.
​
* But in session storage, data is only available in the current tab you set the session storage data in. Session storage is tied to the particular session and each tab of your browser is its own session.
​
* Lastly, cookies are very similar to local storage in the sense that they are accessible from any window or tab. But cookies are also accessible on the server. Every request you make to your backend server, all your cookies are also sent along. So they are also used for authentication-related tasks as well.
​
**Expiration**
​
* Local Storage is very useful as it’s data never expires until you manually remove it. 
​
* Whereas session storage data will expire as soon as you close the tab you are because data is only available to a particular session which is equivalent to a tab.
​
​
* Cookies are unique in the sense that you can manually set the expiration date for them.
​
Clearly, if the data you are storing needs to be available on an ongoing basis then localStorage is preferable to sessionStorage - although you should note both can be cleared by the user so you should not rely on the continuing existence of data in either case.
​
localStorage and sessionStorage are perfect **for persisting non-sensitive data** needed within client scripts between pages (for example: preferences, scores in games). 
​
The data stored in localStorage and sessionStorage can easily be read or changed from within the client/browser so should not be relied upon for storage of sensitive or security-related data within applications.
​
See this video : https://www.youtube.com/watch?v=AwicscsvGLg
​
**localStorage limitations**
​
As easy as it is to use localStorage, it is also easy to misuse it. The following are limitations, and also ways to NOT use localStorage:
​
* Do not store sensitive user information in localStorage
​
* It is not a substitute for a server based database as information is only stored on the browser
​
* localStorage is limited to 5MB across all major browsers
localStorage is quite insecure as it has no form of data protection and can be accessed by any code on your web page
​
* localStorage is synchronous, meaning each operation called would only execute one after the other
​
---