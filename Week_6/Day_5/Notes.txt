-- Return the fullname of the actor

CREATE or REPLACE FUNCTION fullname_actor (fn varchar(50), lan varchar(100)) 
RETURNS VARCHAR(100)
LANGUAGE plpgsql
AS 
$func$
DECLARE
    full_name VARCHAR(100);
BEGIN
   SELECT CONCAT(first_name, ' ', last_name) FROM actors 
   WHERE actors.first_name = fn AND actors.last_name=lan 
   INTO full_name;
   RETURN full_name;
END;
$func$ 

SELECT fullname_actor('George', 'Clooney');
SELECT fullname_actor('John', 'Doe'); -- don't work
----------------------------------------------------

<!-- Update the number of oscars -->

-- return void: return nothing

CREATE or REPLACE FUNCTION add_oscars (numToAdd integer, firstN varchar(20), lastN varchar(20)) 
RETURNS void AS 
$$
BEGIN
   UPDATE actors SET number_oscars = number_oscars + numToAdd 
   WHERE actors.first_name = firstN 
   AND actors.last_name=lastN;
END;
$$
LANGUAGE 'plpgsql';

SELECT add_oscars(5, 'Matt', 'Damon');
SELECT * FROM actors WHERE last_name='Damon';

-- --------------------------------------------------------------------

CREATE OR REPLACE FUNCTION add_and_return (numToAdd integer, firstN varchar(20), lastN varchar(20)) 
RETURNS integer AS 
$$
DECLARE
    new_num integer;
BEGIN
   UPDATE actors SET number_oscars = number_oscars + numToAdd 
   WHERE actors.first_name = firstN 
   AND actors.last_name=lastN
   RETURNING number_oscars INTO new_num;
   RETURN new_num;
END;
$$
LANGUAGE 'plpgsql';

-- SELECT first_name, last_name, add_and_return(10, first_name, last_name) AS numberOscarsInTenYears FROM actors WHERE actors.first_name = 'George' AND actors.last_name='Clooney';



# Function
​
PostgreSQL functions, also known as Stored Procedures, allow you to carry out operations that would normally take several queries and round trips in a single function within the database
​
# Create functions
​
https://www.postgresqltutorial.com/postgresql-create-function/
​
CREATE FUNCTION defines a new function. 
​
CREATE OR REPLACE FUNCTION will either create a new function, or replace an existing definition.
​
```sql
CREATE [OR REPLACE] FUNCTION function_name (arguments) 
RETURNS return_datatype AS $variable_name$
   DECLARE
      declaration;
      [...]
   BEGIN
      < function_body >
      [...]
      RETURN { variable_name | value }
   END; LANGUAGE plpgsql;
```
​
```
CREATE OR REPLACE FUNCTION function_name (parameters-list)  
RETURNS return_type  
LANGUAGE plpgsql  
AS  
$$  
    DECLARE  
    --- variables  
    BEGIN  
        --- SQL statements (logic)  
    END  
$$  
```
​
​
Where,
​
* function-name specifies the name of the function.
​
* [OR REPLACE] option allows modifying an existing function.
​
* The function must contain a return statement.
​
* RETURN clause specifies that data type you are going to return from the function. The return_datatype can be a base, composite, or domain type, or can reference the type of a table column.
​
* function-body contains the executable part.
​
* The AS keyword is used for creating a standalone function.
​
* plpgsql is the name of the language that the function is implemented in. Here, we use this option for PostgreSQL, it Can be SQL, C, internal, or the name of a user-defined procedural language. For backward compatibility, the name can be enclosed by single quotes.
​
* Finally, place a block in the **dollar-quoted string constant**.
* `$tag$`
In this syntax, the tag is optional. It may contain zero or many characters.
https://www.postgresqltutorial.com/dollar-quoted-string-constants/
=> Always use quoted-dollar string constants in user-defined functions and stored procedures to make the code more readable.
​
---
​
### How to create a variable in the DECLARE statement ?
​
In PostgreSQL, a variable is a meaningful name for a memory location. A variable holds a value that can be changed through the block or function. **A variable is always associated with a particular data type**. Before using a variable, **you must declare it in the declaration section** of the PostgreSQL Block. The following illustrates the syntax of declaring a variable.
​
Syntax: 
​
`variable_name data_type [:= expression];`
​